# make fzf use rg and include hidden files
export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden -g "!{node_modules/*,.git/*}"'

#Alias
alias vi="nvim"
alias vim="nvim"
alias scap="flameshot gui"
alias mountnas="sudo mount 192.168.0.56:/ /mnt/nas"
alias umountnas="sudo umount /mnt/nas"
alias status="git status"
alias editzsh="vi ~/.zshrc"
alias editzshfiles="cd ~/.zsh_files && vi * && cd -"
alias editvi="cd ~/.config/nvim && vi ~/.config/nvim/init.vim && cd -"
alias editpoly="cd ~/.config/polybar/ && vi * && cd -"
alias editranger="cd ~/.config/ranger && vi * && cd -"
alias editkitty="cd ~/.config/kitty && vi * && cd -"
alias shutdown="wait-shutdown.sh"
alias restart="wait-restart.sh"
alias gitupdate="git commit -am 'update' && git push"

# suffix alias (opens files with provided application)
alias -s txt="nvim"

# function alias

mkcd(){
    mkdir $1 && cd $1
}

gitget(){
    URL="https://github.com/HPRIOR/"
    git clone "$URL$1" 
}


# create document in vidoc folder with scratch functionality, naming, and stdin support TODO: fix
vidoc(){      
    if [ -t 0 ]; then 
        scratch_count=$(tail -n 1 "/Users/harryprior/Documents/vidocs/.scratches/.scratch_count")
        if [ -z "$1" ]; then
            nvim  "/Users/harryprior/Documents/vidocs/.scratches/scratch-$scratch_count"
            echo "$((scratch_count + 1))" >> "/Users/harryprior/Documents/vidocs/.scratches/.scratch_count"
        else
            nvim "/Users/harryprior/Documents/vidocs/$1"
        fi
    else
        if [ -z "$1" ]; then
            nvim - +"file /Users/harryprior/Documents/vidocs/.scratches/scratch-$scratch_count"
            echo "$((scratch_count + 1))" >> "/Users/harryprior/Documents/vidocs/.scratches/.scratch_count"
        else 
            nvim - +"file /Users/harryprior/Documents/vidocs/$1"
        fi
    fi
}

sedhere(){
    for file in *(.)
    do   
        if [[ $file != *.back ]]; then
            cp "$file" ".$file.back"
        fi
    done
    find . -type f -exec sed -i "$1" {} \;
}

sedundo(){
    for file in .* 
    do 
        if [[ $file == *.back ]]; then
            new_name="${file:1:-5}"
            mv -f "$file" "$new_name"
        fi
    done
}


# pretty print csv file
clcsv(){
    column -s, -t < $1 | less -#2 -N -S
}

killport(){
    fuser -k "$1"/tcp
}

viewport(){
    fuser "$1"/tcp
}

# search files and travel to directory of file
# -a option will search all files including hidden
f(){
    while getopts "a" option; do
    case ${option} in
        a) local p=$(fzf --preview "bat --color=always --style=numbers --line-range=:500 {}") 
    esac
    done

    local p=$(FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs -g "!{node_modules/*,.git/*}"' fzf --preview "bat --color=always --style=numbers --line-range=:500 {}")
 
    local d=${p%/*}
    if [ "x$d" != "x" ]; then
        cd "$d"
    fi
}

# search files and open directory of file with vim
fvd(){
    while getopts "a" option; do
    case ${option} in
        a) local p=$(fzf --preview "bat --color=always --style=numbers --line-range=:500 {}") 
    esac
    done

    local p=$(FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs -g "!{node_modules/*,.git/*}"' fzf --preview "bat --color=always --style=numbers --line-range=:500 {}")
    local d=${p%/*}
    if [ "x$d" != "x" ]; then
        nvim "$d"
    fi
}

# search files and open in vim
fv(){
    while getopts "a" option; do
    case ${option} in
        a) local p=$(fzf --preview "bat --color=always --style=numbers --line-range=:500 {}") 
    esac
    done

    local p=$(FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs -g "!{node_modules/*,.git/*}"' fzf --preview "bat --color=always --style=numbers --line-range=:500 {}")
    if [ "x$p" != "x" ]; then
        # TODO: open directory with nvim, add option to display selected file
        nvim "$p"
    fi
}


# search directories  and preview files/dir as tree
fid(){
    cd $(fd --type directory | fzf --preview "exa {} -T -L 1 --long --colour=always --icons --no-permissions --no-time --no-user --no-filesize --group-directories-first --sort=extension ")
}

# search unique file history and copy output to terminal TODO: fix me
fh(){
     print -z $( history | cut -c 8- | sort | uniq | fzf +s --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g') 
}


# find in files
# fzf starts without explicit input and a custom command variable
# filtering by fzf disabled
# {q} evaluates query string from fzf prompt
# rg is put to sleep for 0.1 to avoid loads of rg processes when typing
# Will break if file path contains a colon!
fif(){
    local RG_PREFIX='rg --column --line-number --no-heading --color=always --smart-case  -g "!{node_modules/*,.git/*}"'
    local INITIAL_QUERY="${*:-}"
    local fzf_result=$(FZF_DEFAULT_COMMAND="$RG_PREFIX $(printf %q "$INITIAL_QUERY")" \
      fzf --ansi \
          --disabled \
          --query "$INITIAL_QUERY" \
          --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
          --delimiter : \
          --preview 'bat --color=always {1} --highlight-line {2}' \
          --preview-window 'up,60%,border-bottom,+{2}+3/3,~3')
    local result=${fzf_result%%:*}
    if [ "x$result" != "x" ]; then
        nvim $result
    fi
}

fp(){
    local p=$(compgen -c | sed '/^_/d'| fzf --preview "tldr {}")
    print -z $p
}


# search through processes and kill the selected one
# TODO: make output prettier (shorter)
fkill() {
    local pid 
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi  

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi  
}


